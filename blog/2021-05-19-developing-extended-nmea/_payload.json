[{"data":1,"prerenderedAt":2389},["ShallowReactive",2],{"content-query-6NIyYGPoPB":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"createdAt":10,"body":11,"_type":2384,"_id":2385,"_source":2386,"_file":2387,"_extension":2388},"/blog/2021-05-19-developing-extended-nmea","blog",false,"","Developing extended-nmea","These are some insights into the development of a node package called extended-nmea, which decodes a stream of text from a protocol called NMEA0183 into objects. Written in TypeScript.","2021-05-19T13:00:00.000Z",{"type":12,"children":13,"toc":2374},"root",[14,22,43,49,61,68,73,94,99,119,126,131,140,177,191,629,634,639,645,650,658,699,705,710,718,731,737,760,773,778,792,798,838,1256,1269,1282,1617,1629,2061,2067,2097,2326,2331,2349,2355,2368],{"type":15,"tag":16,"props":17,"children":19},"element","h2",{"id":18},"extended-nmea",[20],{"type":21,"value":18},"text",{"type":15,"tag":23,"props":24,"children":25},"p",{},[26,28,41],{"type":21,"value":27},"So what is this library ",{"type":15,"tag":29,"props":30,"children":34},"a",{"href":31,"rel":32},"https://npmjs.com/package/extended-nmea",[33],"nofollow",[35],{"type":15,"tag":36,"props":37,"children":39},"code",{"className":38},[],[40],{"type":21,"value":18},{"type":21,"value":42},"? In short, it is a TypeScript library containing a Decoder, and a class for\nevery \"sentence\" in the NMEA0183 protocol. Each \"sentence\" is some data in a specific format, which is sent by GPS\ntrackers, temperature sensors and many other things, but mainly sensors.",{"type":15,"tag":16,"props":44,"children":46},{"id":45},"nmea0183",[47],{"type":21,"value":48},"NMEA0183",{"type":15,"tag":23,"props":50,"children":51},{},[52,59],{"type":15,"tag":29,"props":53,"children":56},{"href":54,"rel":55},"https://www.nmea.org/",[33],[57],{"type":21,"value":58},"NMEA",{"type":21,"value":60},", short for \"National Marine Electronics Association\", is an association from the USA which \"is committed to\nenhancing the technology and safety of marine electronics through installer training and interface standards\".\nOne of these standards is NMEA0183. If you want to purchase the latest version of their standard definition, you can\nbuy one on their site. If you aren't working with it professionally, I would not recommend buying it, since there are\nenough reverse-engineered documentations available online (I even added two to the extended-nmea repository to ease\ndevelopment).",{"type":15,"tag":62,"props":63,"children":65},"h3",{"id":64},"the-protocol",[66],{"type":21,"value":67},"The Protocol",{"type":15,"tag":23,"props":69,"children":70},{},[71],{"type":21,"value":72},"The protocol itself is pretty simple. I will skip the physical part of the protocol, which involves connecting wires in\na specific way and go directly to the textual representation.",{"type":15,"tag":23,"props":74,"children":75},{},[76,78,84,86,92],{"type":21,"value":77},"The basic concept to grasp is what a \"sentence\" is. A sentence always begins with the ",{"type":15,"tag":36,"props":79,"children":81},{"className":80},[],[82],{"type":21,"value":83},"$",{"type":21,"value":85}," character and always ends with\n",{"type":15,"tag":36,"props":87,"children":89},{"className":88},[],[90],{"type":21,"value":91},"\u003CCR>\u003CLF>",{"type":21,"value":93}," (a windows-style line ending). They are always made up of printable ASCII characters and should not be more\nthan 80 characters in length.",{"type":15,"tag":23,"props":95,"children":96},{},[97],{"type":21,"value":98},"Next, we define three different sentence types:",{"type":15,"tag":100,"props":101,"children":102},"ul",{},[103,109,114],{"type":15,"tag":104,"props":105,"children":106},"li",{},[107],{"type":21,"value":108},"Talker Sentence: always the same format, sent by a sensor containing data and status information",{"type":15,"tag":104,"props":110,"children":111},{},[112],{"type":21,"value":113},"Query Sentence: always the same format, sent by a receiver to request specific data from a talker",{"type":15,"tag":104,"props":115,"children":116},{},[117],{"type":21,"value":118},"Proprietary Sentence: data format and contents defined by third-party",{"type":15,"tag":120,"props":121,"children":123},"h4",{"id":122},"talker-sentences",[124],{"type":21,"value":125},"Talker Sentences",{"type":15,"tag":23,"props":127,"children":128},{},[129],{"type":21,"value":130},"A talker sentence always begins with \"$\" followed by the talker ID and then the sentence ID. The talker ID is always two\ncharacters and the sentence ID always three characters in length. Following this \"header\" is a list of fields, separated\nby commas. The number of fields varies by sentence ID. Some sentences need more than 80 characters, so they dedicate the\nfirst two fields to a \"page\" and \"total pages\" type of information (can be seen in GSV for example).\nAfter this list, a \"*\" character followed by a checksum is appended. The newline ends the sentence.",{"type":15,"tag":132,"props":133,"children":135},"pre",{"code":134},"$AABBB,CCC,123,...*XX\u003CCR>\u003CLF>\n",[136],{"type":15,"tag":36,"props":137,"children":138},{"__ignoreMap":7},[139],{"type":21,"value":134},{"type":15,"tag":23,"props":141,"children":142},{},[143,145,151,153,159,161,167,169,175],{"type":21,"value":144},"In this example, ",{"type":15,"tag":36,"props":146,"children":148},{"className":147},[],[149],{"type":21,"value":150},"AA",{"type":21,"value":152}," is the talker ID, ",{"type":15,"tag":36,"props":154,"children":156},{"className":155},[],[157],{"type":21,"value":158},"BBB",{"type":21,"value":160}," is the sentence ID, ",{"type":15,"tag":36,"props":162,"children":164},{"className":163},[],[165],{"type":21,"value":166},"CCC,123,...",{"type":21,"value":168}," are the data fields and ",{"type":15,"tag":36,"props":170,"children":172},{"className":171},[],[173],{"type":21,"value":174},"XX",{"type":21,"value":176}," is the\nchecksum.",{"type":15,"tag":23,"props":178,"children":179},{},[180,182,189],{"type":21,"value":181},"The checksum is a simple XOR-checksum for every character between \"$\" and \"*\", excluding both. This is a code snippet\nfrom the library, which implements this checksum calculation in Typescript (",{"type":15,"tag":29,"props":183,"children":186},{"href":184,"rel":185},"https://github.com/ricardoboss/extended-nmea/blob/70915a762d1b71678c272a73027480712f33fda0/src/helpers.ts#L10",[33],[187],{"type":21,"value":188},"permalink",{"type":21,"value":190},"):",{"type":15,"tag":132,"props":192,"children":196},{"code":193,"language":194,"meta":7,"className":195,"style":7},"function xorChecksum(data: string): Uppercase\u003Cstring> {\n  if (typeof data !== \"string\")\n    throw new TypeError(\n      `Cannot use arguments of type '${typeof data}' as input.`,\n    )\n\n  let sum = 0\n  for (let i = 0; i \u003C data.length; i++) sum ^= data.charCodeAt(i)\n\n  const hex = sum.toString(16)\n\n  // crude hack to pad with zeros\n  return (\"00\" + hex).slice(-2).toUpperCase()\n}\n","typescript","language-typescript shiki shiki-themes github-dark",[197],{"type":15,"tag":36,"props":198,"children":199},{"__ignoreMap":7},[200,270,310,334,362,371,381,405,490,498,540,548,558,620],{"type":15,"tag":201,"props":202,"children":205},"span",{"class":203,"line":204},"line",1,[206,212,218,224,230,235,241,246,250,255,260,265],{"type":15,"tag":201,"props":207,"children":209},{"style":208},"--shiki-default:#F97583",[210],{"type":21,"value":211},"function",{"type":15,"tag":201,"props":213,"children":215},{"style":214},"--shiki-default:#B392F0",[216],{"type":21,"value":217}," xorChecksum",{"type":15,"tag":201,"props":219,"children":221},{"style":220},"--shiki-default:#E1E4E8",[222],{"type":21,"value":223},"(",{"type":15,"tag":201,"props":225,"children":227},{"style":226},"--shiki-default:#FFAB70",[228],{"type":21,"value":229},"data",{"type":15,"tag":201,"props":231,"children":232},{"style":208},[233],{"type":21,"value":234},":",{"type":15,"tag":201,"props":236,"children":238},{"style":237},"--shiki-default:#79B8FF",[239],{"type":21,"value":240}," string",{"type":15,"tag":201,"props":242,"children":243},{"style":220},[244],{"type":21,"value":245},")",{"type":15,"tag":201,"props":247,"children":248},{"style":208},[249],{"type":21,"value":234},{"type":15,"tag":201,"props":251,"children":252},{"style":214},[253],{"type":21,"value":254}," Uppercase",{"type":15,"tag":201,"props":256,"children":257},{"style":220},[258],{"type":21,"value":259},"\u003C",{"type":15,"tag":201,"props":261,"children":262},{"style":237},[263],{"type":21,"value":264},"string",{"type":15,"tag":201,"props":266,"children":267},{"style":220},[268],{"type":21,"value":269},"> {\n",{"type":15,"tag":201,"props":271,"children":273},{"class":203,"line":272},2,[274,279,284,289,294,299,305],{"type":15,"tag":201,"props":275,"children":276},{"style":208},[277],{"type":21,"value":278},"  if",{"type":15,"tag":201,"props":280,"children":281},{"style":220},[282],{"type":21,"value":283}," (",{"type":15,"tag":201,"props":285,"children":286},{"style":208},[287],{"type":21,"value":288},"typeof",{"type":15,"tag":201,"props":290,"children":291},{"style":220},[292],{"type":21,"value":293}," data ",{"type":15,"tag":201,"props":295,"children":296},{"style":208},[297],{"type":21,"value":298},"!==",{"type":15,"tag":201,"props":300,"children":302},{"style":301},"--shiki-default:#9ECBFF",[303],{"type":21,"value":304}," \"string\"",{"type":15,"tag":201,"props":306,"children":307},{"style":220},[308],{"type":21,"value":309},")\n",{"type":15,"tag":201,"props":311,"children":313},{"class":203,"line":312},3,[314,319,324,329],{"type":15,"tag":201,"props":315,"children":316},{"style":208},[317],{"type":21,"value":318},"    throw",{"type":15,"tag":201,"props":320,"children":321},{"style":208},[322],{"type":21,"value":323}," new",{"type":15,"tag":201,"props":325,"children":326},{"style":214},[327],{"type":21,"value":328}," TypeError",{"type":15,"tag":201,"props":330,"children":331},{"style":220},[332],{"type":21,"value":333},"(\n",{"type":15,"tag":201,"props":335,"children":337},{"class":203,"line":336},4,[338,343,347,352,357],{"type":15,"tag":201,"props":339,"children":340},{"style":301},[341],{"type":21,"value":342},"      `Cannot use arguments of type '${",{"type":15,"tag":201,"props":344,"children":345},{"style":208},[346],{"type":21,"value":288},{"type":15,"tag":201,"props":348,"children":349},{"style":220},[350],{"type":21,"value":351}," data",{"type":15,"tag":201,"props":353,"children":354},{"style":301},[355],{"type":21,"value":356},"}' as input.`",{"type":15,"tag":201,"props":358,"children":359},{"style":220},[360],{"type":21,"value":361},",\n",{"type":15,"tag":201,"props":363,"children":365},{"class":203,"line":364},5,[366],{"type":15,"tag":201,"props":367,"children":368},{"style":220},[369],{"type":21,"value":370},"    )\n",{"type":15,"tag":201,"props":372,"children":374},{"class":203,"line":373},6,[375],{"type":15,"tag":201,"props":376,"children":378},{"emptyLinePlaceholder":377},true,[379],{"type":21,"value":380},"\n",{"type":15,"tag":201,"props":382,"children":384},{"class":203,"line":383},7,[385,390,395,400],{"type":15,"tag":201,"props":386,"children":387},{"style":208},[388],{"type":21,"value":389},"  let",{"type":15,"tag":201,"props":391,"children":392},{"style":220},[393],{"type":21,"value":394}," sum ",{"type":15,"tag":201,"props":396,"children":397},{"style":208},[398],{"type":21,"value":399},"=",{"type":15,"tag":201,"props":401,"children":402},{"style":237},[403],{"type":21,"value":404}," 0\n",{"type":15,"tag":201,"props":406,"children":408},{"class":203,"line":407},8,[409,414,418,423,428,432,437,442,446,451,456,461,466,471,476,480,485],{"type":15,"tag":201,"props":410,"children":411},{"style":208},[412],{"type":21,"value":413},"  for",{"type":15,"tag":201,"props":415,"children":416},{"style":220},[417],{"type":21,"value":283},{"type":15,"tag":201,"props":419,"children":420},{"style":208},[421],{"type":21,"value":422},"let",{"type":15,"tag":201,"props":424,"children":425},{"style":220},[426],{"type":21,"value":427}," i ",{"type":15,"tag":201,"props":429,"children":430},{"style":208},[431],{"type":21,"value":399},{"type":15,"tag":201,"props":433,"children":434},{"style":237},[435],{"type":21,"value":436}," 0",{"type":15,"tag":201,"props":438,"children":439},{"style":220},[440],{"type":21,"value":441},"; i ",{"type":15,"tag":201,"props":443,"children":444},{"style":208},[445],{"type":21,"value":259},{"type":15,"tag":201,"props":447,"children":448},{"style":220},[449],{"type":21,"value":450}," data.",{"type":15,"tag":201,"props":452,"children":453},{"style":237},[454],{"type":21,"value":455},"length",{"type":15,"tag":201,"props":457,"children":458},{"style":220},[459],{"type":21,"value":460},"; i",{"type":15,"tag":201,"props":462,"children":463},{"style":208},[464],{"type":21,"value":465},"++",{"type":15,"tag":201,"props":467,"children":468},{"style":220},[469],{"type":21,"value":470},") sum ",{"type":15,"tag":201,"props":472,"children":473},{"style":208},[474],{"type":21,"value":475},"^=",{"type":15,"tag":201,"props":477,"children":478},{"style":220},[479],{"type":21,"value":450},{"type":15,"tag":201,"props":481,"children":482},{"style":214},[483],{"type":21,"value":484},"charCodeAt",{"type":15,"tag":201,"props":486,"children":487},{"style":220},[488],{"type":21,"value":489},"(i)\n",{"type":15,"tag":201,"props":491,"children":493},{"class":203,"line":492},9,[494],{"type":15,"tag":201,"props":495,"children":496},{"emptyLinePlaceholder":377},[497],{"type":21,"value":380},{"type":15,"tag":201,"props":499,"children":501},{"class":203,"line":500},10,[502,507,512,517,522,527,531,536],{"type":15,"tag":201,"props":503,"children":504},{"style":208},[505],{"type":21,"value":506},"  const",{"type":15,"tag":201,"props":508,"children":509},{"style":237},[510],{"type":21,"value":511}," hex",{"type":15,"tag":201,"props":513,"children":514},{"style":208},[515],{"type":21,"value":516}," =",{"type":15,"tag":201,"props":518,"children":519},{"style":220},[520],{"type":21,"value":521}," sum.",{"type":15,"tag":201,"props":523,"children":524},{"style":214},[525],{"type":21,"value":526},"toString",{"type":15,"tag":201,"props":528,"children":529},{"style":220},[530],{"type":21,"value":223},{"type":15,"tag":201,"props":532,"children":533},{"style":237},[534],{"type":21,"value":535},"16",{"type":15,"tag":201,"props":537,"children":538},{"style":220},[539],{"type":21,"value":309},{"type":15,"tag":201,"props":541,"children":543},{"class":203,"line":542},11,[544],{"type":15,"tag":201,"props":545,"children":546},{"emptyLinePlaceholder":377},[547],{"type":21,"value":380},{"type":15,"tag":201,"props":549,"children":551},{"class":203,"line":550},12,[552],{"type":15,"tag":201,"props":553,"children":555},{"style":554},"--shiki-default:#6A737D",[556],{"type":21,"value":557},"  // crude hack to pad with zeros\n",{"type":15,"tag":201,"props":559,"children":561},{"class":203,"line":560},13,[562,567,571,576,581,586,591,595,600,605,610,615],{"type":15,"tag":201,"props":563,"children":564},{"style":208},[565],{"type":21,"value":566},"  return",{"type":15,"tag":201,"props":568,"children":569},{"style":220},[570],{"type":21,"value":283},{"type":15,"tag":201,"props":572,"children":573},{"style":301},[574],{"type":21,"value":575},"\"00\"",{"type":15,"tag":201,"props":577,"children":578},{"style":208},[579],{"type":21,"value":580}," +",{"type":15,"tag":201,"props":582,"children":583},{"style":220},[584],{"type":21,"value":585}," hex).",{"type":15,"tag":201,"props":587,"children":588},{"style":214},[589],{"type":21,"value":590},"slice",{"type":15,"tag":201,"props":592,"children":593},{"style":220},[594],{"type":21,"value":223},{"type":15,"tag":201,"props":596,"children":597},{"style":208},[598],{"type":21,"value":599},"-",{"type":15,"tag":201,"props":601,"children":602},{"style":237},[603],{"type":21,"value":604},"2",{"type":15,"tag":201,"props":606,"children":607},{"style":220},[608],{"type":21,"value":609},").",{"type":15,"tag":201,"props":611,"children":612},{"style":214},[613],{"type":21,"value":614},"toUpperCase",{"type":15,"tag":201,"props":616,"children":617},{"style":220},[618],{"type":21,"value":619},"()\n",{"type":15,"tag":201,"props":621,"children":623},{"class":203,"line":622},14,[624],{"type":15,"tag":201,"props":625,"children":626},{"style":220},[627],{"type":21,"value":628},"}\n",{"type":15,"tag":23,"props":630,"children":631},{},[632],{"type":21,"value":633},"The resulting checksum will always consist of two hexadecimal uppercase characters.",{"type":15,"tag":23,"props":635,"children":636},{},[637],{"type":21,"value":638},"What I wrote earlier about the talker and sentence ID lengths is not always true. Not every device out there in the\nworld strictly adheres to the protocol and may use more or less than three characters for the sentence ID (at least in\nmy experience). Therefore, the limit of 80 characters is also not as strict as the protocol indicates.",{"type":15,"tag":120,"props":640,"children":642},{"id":641},"query-sentences",[643],{"type":21,"value":644},"Query Sentences",{"type":15,"tag":23,"props":646,"children":647},{},[648],{"type":21,"value":649},"A query sentence allows devices to request certain sentences (data) from other devices. It has a similar structure to\ntalker sentences:",{"type":15,"tag":132,"props":651,"children":653},{"code":652},"$RRLLQ,BBB\u003CCR>\u003CLF>\n",[654],{"type":15,"tag":36,"props":655,"children":656},{"__ignoreMap":7},[657],{"type":21,"value":652},{"type":15,"tag":23,"props":659,"children":660},{},[661,667,669,675,677,682,684,690,692,697],{"type":15,"tag":36,"props":662,"children":664},{"className":663},[],[665],{"type":21,"value":666},"RR",{"type":21,"value":668}," is the requester ID, ",{"type":15,"tag":36,"props":670,"children":672},{"className":671},[],[673],{"type":21,"value":674},"LL",{"type":21,"value":676}," is the device being queried and ",{"type":15,"tag":36,"props":678,"children":680},{"className":679},[],[681],{"type":21,"value":158},{"type":21,"value":683}," is the mnemonic of the sentence being requested.\nThe fifth letter in a query sentence is always ",{"type":15,"tag":36,"props":685,"children":687},{"className":686},[],[688],{"type":21,"value":689},"Q",{"type":21,"value":691},". ",{"type":15,"tag":36,"props":693,"children":695},{"className":694},[],[696],{"type":21,"value":158},{"type":21,"value":698}," corresponds to the sentence ID in the talker sentence above.\nAs you can see, this sentence does not contain a checksum.",{"type":15,"tag":120,"props":700,"children":702},{"id":701},"proprietary-sentences",[703],{"type":21,"value":704},"Proprietary Sentences",{"type":15,"tag":23,"props":706,"children":707},{},[708],{"type":21,"value":709},"The proprietary sentences are a means to allow third-party developers to create their own sentence IDs or even data\nformats, as long as they fit in the general format for NMEA0183.",{"type":15,"tag":132,"props":711,"children":713},{"code":712},"$PMMM...\u003CCR>\u003CLF>\n",[714],{"type":15,"tag":36,"props":715,"children":716},{"__ignoreMap":7},[717],{"type":21,"value":712},{"type":15,"tag":23,"props":719,"children":720},{},[721,723,729],{"type":21,"value":722},"Proprietary sentences always start with \"$P\", followed by a three character manufacturer ID ",{"type":15,"tag":36,"props":724,"children":726},{"className":725},[],[727],{"type":21,"value":728},"MMM",{"type":21,"value":730},". Everything between this\nheader and the newline can be formatted however the manufacturer wants.",{"type":15,"tag":16,"props":732,"children":734},{"id":733},"why-tho",[735],{"type":21,"value":736},"Why tho",{"type":15,"tag":23,"props":738,"children":739},{},[740,742,749,751,758],{"type":21,"value":741},"The motivation behind this project arose when I wanted to create a web application, which parsed and then visualized\ndata provided in the NMEA0183 standard. After looking into some existing libraries, I forked ",{"type":15,"tag":29,"props":743,"children":746},{"href":744,"rel":745},"https://github.com/jamesp/node-nmea",[33],[747],{"type":21,"value":748},"jamesp/node-nmea",{"type":21,"value":750}," and\nstarted tinkering with the code and even opened a ",{"type":15,"tag":29,"props":752,"children":755},{"href":753,"rel":754},"https://github.com/jamesp/node-nmea/pull/24",[33],[756],{"type":21,"value":757},"pull request",{"type":21,"value":759},", which got accepted. In my fork, I originally just\nwanted to clean up the code and maybe change some interfaces.",{"type":15,"tag":23,"props":761,"children":762},{},[763,765,771],{"type":21,"value":764},"When I began my original project, I wanted to harness the power of type safety from TypeScript. Since ",{"type":15,"tag":29,"props":766,"children":768},{"href":744,"rel":767},[33],[769],{"type":21,"value":770},"node-nmea",{"type":21,"value":772}," was\nnot type safe, it didn't play well with the rest of the code. That's why I created this version, which is a\ncompletely new implementation with the same idea, just with TypeScript support.",{"type":15,"tag":23,"props":774,"children":775},{},[776],{"type":21,"value":777},"The library supports registering proprietary and talker sentences not already included, so you can start developing ASAP\nwith your use-case.",{"type":15,"tag":23,"props":779,"children":780},{},[781,783,790],{"type":21,"value":782},"In the end, I created ",{"type":15,"tag":29,"props":784,"children":787},{"href":785,"rel":786},"https://github.com/ricardoboss/vessel-state",[33],[788],{"type":21,"value":789},"ricardoboss/vessel-state",{"type":21,"value":791},", which uses this library to update a Vuex store's state,\nrepresenting a vessel with the latest information available.",{"type":15,"tag":16,"props":793,"children":795},{"id":794},"starting-development",[796],{"type":21,"value":797},"Starting Development",{"type":15,"tag":23,"props":799,"children":800},{},[801,803,809,811,820,822,827,829,836],{"type":21,"value":802},"I began by creating class definitions for NMEA sentences in general and the three different sub-types (talker, query,\nproprietary). Then, I created the ",{"type":15,"tag":36,"props":804,"children":806},{"className":805},[],[807],{"type":21,"value":808},"Decoder",{"type":21,"value":810}," class, which would later possess the functionality to match a string to a\nregistered sentence type and return a decoded version of it. I also wanted to keep the ability to add other sentences\nlater on. The original library (",{"type":15,"tag":29,"props":812,"children":814},{"href":744,"rel":813},[33],[815],{"type":15,"tag":36,"props":816,"children":818},{"className":817},[],[819],{"type":21,"value":770},{"type":21,"value":821},") used a map with string keys, where the sentence ID is the key, and the\nvalue is an object with a decoder function. I thought this was a good idea, so I re-used (stole) this idea. The\n",{"type":15,"tag":36,"props":823,"children":825},{"className":824},[],[826],{"type":21,"value":808},{"type":21,"value":828}," class keeps a map for every sentence type to quickly filter it. ",{"type":15,"tag":29,"props":830,"children":833},{"href":831,"rel":832},"https://github.com/ricardoboss/extended-nmea/blob/70915a762d1b71678c272a73027480712f33fda0/src/decoder.ts#L45",[33],[834],{"type":21,"value":835},"This method",{"type":21,"value":837}," of the decoder class checks\nwhich sentence type a string given to it has and passes it to a more-detailed decoder method:",{"type":15,"tag":132,"props":839,"children":841},{"code":840,"language":194,"meta":7,"className":195,"style":7},"class Decoder {\n  public static decode(data: string): INmeaSentence {\n    if (typeof data !== \"string\")\n      throw new Error(\n        `Unable to decode sentence: invalid data type: ${typeof data}. Only strings are supported.`,\n      )\n\n    // check proprietary sentences first to prevent false positives\n    if (data.length > 1 && data[1] === \"P\") {\n      return this.decodeProprietary(data)\n    }\n\n    if (data.length > 5 && data[5] === \"Q\") {\n      return this.decodeQuery(data)\n    }\n\n    return this.decodeTalker(data)\n  }\n}\n",[842],{"type":15,"tag":36,"props":843,"children":844},{"__ignoreMap":7},[845,863,914,946,967,992,1000,1007,1015,1076,1104,1112,1119,1173,1197,1205,1213,1239,1248],{"type":15,"tag":201,"props":846,"children":847},{"class":203,"line":204},[848,853,858],{"type":15,"tag":201,"props":849,"children":850},{"style":208},[851],{"type":21,"value":852},"class",{"type":15,"tag":201,"props":854,"children":855},{"style":214},[856],{"type":21,"value":857}," Decoder",{"type":15,"tag":201,"props":859,"children":860},{"style":220},[861],{"type":21,"value":862}," {\n",{"type":15,"tag":201,"props":864,"children":865},{"class":203,"line":272},[866,871,876,881,885,889,893,897,901,905,910],{"type":15,"tag":201,"props":867,"children":868},{"style":208},[869],{"type":21,"value":870},"  public",{"type":15,"tag":201,"props":872,"children":873},{"style":208},[874],{"type":21,"value":875}," static",{"type":15,"tag":201,"props":877,"children":878},{"style":214},[879],{"type":21,"value":880}," decode",{"type":15,"tag":201,"props":882,"children":883},{"style":220},[884],{"type":21,"value":223},{"type":15,"tag":201,"props":886,"children":887},{"style":226},[888],{"type":21,"value":229},{"type":15,"tag":201,"props":890,"children":891},{"style":208},[892],{"type":21,"value":234},{"type":15,"tag":201,"props":894,"children":895},{"style":237},[896],{"type":21,"value":240},{"type":15,"tag":201,"props":898,"children":899},{"style":220},[900],{"type":21,"value":245},{"type":15,"tag":201,"props":902,"children":903},{"style":208},[904],{"type":21,"value":234},{"type":15,"tag":201,"props":906,"children":907},{"style":214},[908],{"type":21,"value":909}," INmeaSentence",{"type":15,"tag":201,"props":911,"children":912},{"style":220},[913],{"type":21,"value":862},{"type":15,"tag":201,"props":915,"children":916},{"class":203,"line":312},[917,922,926,930,934,938,942],{"type":15,"tag":201,"props":918,"children":919},{"style":208},[920],{"type":21,"value":921},"    if",{"type":15,"tag":201,"props":923,"children":924},{"style":220},[925],{"type":21,"value":283},{"type":15,"tag":201,"props":927,"children":928},{"style":208},[929],{"type":21,"value":288},{"type":15,"tag":201,"props":931,"children":932},{"style":220},[933],{"type":21,"value":293},{"type":15,"tag":201,"props":935,"children":936},{"style":208},[937],{"type":21,"value":298},{"type":15,"tag":201,"props":939,"children":940},{"style":301},[941],{"type":21,"value":304},{"type":15,"tag":201,"props":943,"children":944},{"style":220},[945],{"type":21,"value":309},{"type":15,"tag":201,"props":947,"children":948},{"class":203,"line":336},[949,954,958,963],{"type":15,"tag":201,"props":950,"children":951},{"style":208},[952],{"type":21,"value":953},"      throw",{"type":15,"tag":201,"props":955,"children":956},{"style":208},[957],{"type":21,"value":323},{"type":15,"tag":201,"props":959,"children":960},{"style":214},[961],{"type":21,"value":962}," Error",{"type":15,"tag":201,"props":964,"children":965},{"style":220},[966],{"type":21,"value":333},{"type":15,"tag":201,"props":968,"children":969},{"class":203,"line":364},[970,975,979,983,988],{"type":15,"tag":201,"props":971,"children":972},{"style":301},[973],{"type":21,"value":974},"        `Unable to decode sentence: invalid data type: ${",{"type":15,"tag":201,"props":976,"children":977},{"style":208},[978],{"type":21,"value":288},{"type":15,"tag":201,"props":980,"children":981},{"style":220},[982],{"type":21,"value":351},{"type":15,"tag":201,"props":984,"children":985},{"style":301},[986],{"type":21,"value":987},"}. Only strings are supported.`",{"type":15,"tag":201,"props":989,"children":990},{"style":220},[991],{"type":21,"value":361},{"type":15,"tag":201,"props":993,"children":994},{"class":203,"line":373},[995],{"type":15,"tag":201,"props":996,"children":997},{"style":220},[998],{"type":21,"value":999},"      )\n",{"type":15,"tag":201,"props":1001,"children":1002},{"class":203,"line":383},[1003],{"type":15,"tag":201,"props":1004,"children":1005},{"emptyLinePlaceholder":377},[1006],{"type":21,"value":380},{"type":15,"tag":201,"props":1008,"children":1009},{"class":203,"line":407},[1010],{"type":15,"tag":201,"props":1011,"children":1012},{"style":554},[1013],{"type":21,"value":1014},"    // check proprietary sentences first to prevent false positives\n",{"type":15,"tag":201,"props":1016,"children":1017},{"class":203,"line":492},[1018,1022,1027,1031,1036,1041,1046,1051,1056,1061,1066,1071],{"type":15,"tag":201,"props":1019,"children":1020},{"style":208},[1021],{"type":21,"value":921},{"type":15,"tag":201,"props":1023,"children":1024},{"style":220},[1025],{"type":21,"value":1026}," (data.",{"type":15,"tag":201,"props":1028,"children":1029},{"style":237},[1030],{"type":21,"value":455},{"type":15,"tag":201,"props":1032,"children":1033},{"style":208},[1034],{"type":21,"value":1035}," >",{"type":15,"tag":201,"props":1037,"children":1038},{"style":237},[1039],{"type":21,"value":1040}," 1",{"type":15,"tag":201,"props":1042,"children":1043},{"style":208},[1044],{"type":21,"value":1045}," &&",{"type":15,"tag":201,"props":1047,"children":1048},{"style":220},[1049],{"type":21,"value":1050}," data[",{"type":15,"tag":201,"props":1052,"children":1053},{"style":237},[1054],{"type":21,"value":1055},"1",{"type":15,"tag":201,"props":1057,"children":1058},{"style":220},[1059],{"type":21,"value":1060},"] ",{"type":15,"tag":201,"props":1062,"children":1063},{"style":208},[1064],{"type":21,"value":1065},"===",{"type":15,"tag":201,"props":1067,"children":1068},{"style":301},[1069],{"type":21,"value":1070}," \"P\"",{"type":15,"tag":201,"props":1072,"children":1073},{"style":220},[1074],{"type":21,"value":1075},") {\n",{"type":15,"tag":201,"props":1077,"children":1078},{"class":203,"line":500},[1079,1084,1089,1094,1099],{"type":15,"tag":201,"props":1080,"children":1081},{"style":208},[1082],{"type":21,"value":1083},"      return",{"type":15,"tag":201,"props":1085,"children":1086},{"style":237},[1087],{"type":21,"value":1088}," this",{"type":15,"tag":201,"props":1090,"children":1091},{"style":220},[1092],{"type":21,"value":1093},".",{"type":15,"tag":201,"props":1095,"children":1096},{"style":214},[1097],{"type":21,"value":1098},"decodeProprietary",{"type":15,"tag":201,"props":1100,"children":1101},{"style":220},[1102],{"type":21,"value":1103},"(data)\n",{"type":15,"tag":201,"props":1105,"children":1106},{"class":203,"line":542},[1107],{"type":15,"tag":201,"props":1108,"children":1109},{"style":220},[1110],{"type":21,"value":1111},"    }\n",{"type":15,"tag":201,"props":1113,"children":1114},{"class":203,"line":550},[1115],{"type":15,"tag":201,"props":1116,"children":1117},{"emptyLinePlaceholder":377},[1118],{"type":21,"value":380},{"type":15,"tag":201,"props":1120,"children":1121},{"class":203,"line":560},[1122,1126,1130,1134,1138,1143,1147,1151,1156,1160,1164,1169],{"type":15,"tag":201,"props":1123,"children":1124},{"style":208},[1125],{"type":21,"value":921},{"type":15,"tag":201,"props":1127,"children":1128},{"style":220},[1129],{"type":21,"value":1026},{"type":15,"tag":201,"props":1131,"children":1132},{"style":237},[1133],{"type":21,"value":455},{"type":15,"tag":201,"props":1135,"children":1136},{"style":208},[1137],{"type":21,"value":1035},{"type":15,"tag":201,"props":1139,"children":1140},{"style":237},[1141],{"type":21,"value":1142}," 5",{"type":15,"tag":201,"props":1144,"children":1145},{"style":208},[1146],{"type":21,"value":1045},{"type":15,"tag":201,"props":1148,"children":1149},{"style":220},[1150],{"type":21,"value":1050},{"type":15,"tag":201,"props":1152,"children":1153},{"style":237},[1154],{"type":21,"value":1155},"5",{"type":15,"tag":201,"props":1157,"children":1158},{"style":220},[1159],{"type":21,"value":1060},{"type":15,"tag":201,"props":1161,"children":1162},{"style":208},[1163],{"type":21,"value":1065},{"type":15,"tag":201,"props":1165,"children":1166},{"style":301},[1167],{"type":21,"value":1168}," \"Q\"",{"type":15,"tag":201,"props":1170,"children":1171},{"style":220},[1172],{"type":21,"value":1075},{"type":15,"tag":201,"props":1174,"children":1175},{"class":203,"line":622},[1176,1180,1184,1188,1193],{"type":15,"tag":201,"props":1177,"children":1178},{"style":208},[1179],{"type":21,"value":1083},{"type":15,"tag":201,"props":1181,"children":1182},{"style":237},[1183],{"type":21,"value":1088},{"type":15,"tag":201,"props":1185,"children":1186},{"style":220},[1187],{"type":21,"value":1093},{"type":15,"tag":201,"props":1189,"children":1190},{"style":214},[1191],{"type":21,"value":1192},"decodeQuery",{"type":15,"tag":201,"props":1194,"children":1195},{"style":220},[1196],{"type":21,"value":1103},{"type":15,"tag":201,"props":1198,"children":1200},{"class":203,"line":1199},15,[1201],{"type":15,"tag":201,"props":1202,"children":1203},{"style":220},[1204],{"type":21,"value":1111},{"type":15,"tag":201,"props":1206,"children":1208},{"class":203,"line":1207},16,[1209],{"type":15,"tag":201,"props":1210,"children":1211},{"emptyLinePlaceholder":377},[1212],{"type":21,"value":380},{"type":15,"tag":201,"props":1214,"children":1216},{"class":203,"line":1215},17,[1217,1222,1226,1230,1235],{"type":15,"tag":201,"props":1218,"children":1219},{"style":208},[1220],{"type":21,"value":1221},"    return",{"type":15,"tag":201,"props":1223,"children":1224},{"style":237},[1225],{"type":21,"value":1088},{"type":15,"tag":201,"props":1227,"children":1228},{"style":220},[1229],{"type":21,"value":1093},{"type":15,"tag":201,"props":1231,"children":1232},{"style":214},[1233],{"type":21,"value":1234},"decodeTalker",{"type":15,"tag":201,"props":1236,"children":1237},{"style":220},[1238],{"type":21,"value":1103},{"type":15,"tag":201,"props":1240,"children":1242},{"class":203,"line":1241},18,[1243],{"type":15,"tag":201,"props":1244,"children":1245},{"style":220},[1246],{"type":21,"value":1247},"  }\n",{"type":15,"tag":201,"props":1249,"children":1251},{"class":203,"line":1250},19,[1252],{"type":15,"tag":201,"props":1253,"children":1254},{"style":220},[1255],{"type":21,"value":628},{"type":15,"tag":23,"props":1257,"children":1258},{},[1259,1261,1267],{"type":21,"value":1260},"Each method has it's own way of parsing the given sentence. A query sentence for example will just invoke the\n",{"type":15,"tag":36,"props":1262,"children":1264},{"className":1263},[],[1265],{"type":21,"value":1266},"QuerySentence",{"type":21,"value":1268}," constructor and all interpretation of the data is done in the getters. Proprietary and talker sentences\non the other hand need to be dynamic and receive a little more evaluation.",{"type":15,"tag":23,"props":1270,"children":1271},{},[1272,1274,1280],{"type":21,"value":1273},"To instantiate a proprietary sentence, we first need to check if it has been registered in the decoder. The\n",{"type":15,"tag":36,"props":1275,"children":1277},{"className":1276},[],[1278],{"type":21,"value":1279},"ProprietaryCodecs",{"type":21,"value":1281}," array contains the constructors registered by the user and are keyed by their identifier\n(manufacturer id + sentence id). If the user expects a certain type, they can pass it as a generic parameter and enjoy\nfull type safety:",{"type":15,"tag":132,"props":1283,"children":1285},{"code":1284,"language":194,"meta":7,"className":195,"style":7},"class Decoder {\n  public static decodeProprietary\u003CT extends IProprietarySentence>(\n    data: string,\n  ): T {\n    const manufacturerId = data.substr(2, data.indexOf(\",\") - 2)\n    if (!Decoder.ProprietaryCodecs.has(manufacturerId))\n      throw new Error(\n        `Unable to decode sentence: unknown manufacturer id for proprietary sentence: ${manufacturerId}`,\n      )\n\n    const sentenceConstructor = Decoder.ProprietaryCodecs.get(manufacturerId)\n    return new sentenceConstructor(data, manufacturerId) as T\n  }\n}\n",[1286],{"type":15,"tag":36,"props":1287,"children":1288},{"__ignoreMap":7},[1289,1304,1344,1364,1385,1456,1487,1506,1528,1535,1542,1573,1603,1610],{"type":15,"tag":201,"props":1290,"children":1291},{"class":203,"line":204},[1292,1296,1300],{"type":15,"tag":201,"props":1293,"children":1294},{"style":208},[1295],{"type":21,"value":852},{"type":15,"tag":201,"props":1297,"children":1298},{"style":214},[1299],{"type":21,"value":857},{"type":15,"tag":201,"props":1301,"children":1302},{"style":220},[1303],{"type":21,"value":862},{"type":15,"tag":201,"props":1305,"children":1306},{"class":203,"line":272},[1307,1311,1315,1320,1324,1329,1334,1339],{"type":15,"tag":201,"props":1308,"children":1309},{"style":208},[1310],{"type":21,"value":870},{"type":15,"tag":201,"props":1312,"children":1313},{"style":208},[1314],{"type":21,"value":875},{"type":15,"tag":201,"props":1316,"children":1317},{"style":214},[1318],{"type":21,"value":1319}," decodeProprietary",{"type":15,"tag":201,"props":1321,"children":1322},{"style":220},[1323],{"type":21,"value":259},{"type":15,"tag":201,"props":1325,"children":1326},{"style":214},[1327],{"type":21,"value":1328},"T",{"type":15,"tag":201,"props":1330,"children":1331},{"style":208},[1332],{"type":21,"value":1333}," extends",{"type":15,"tag":201,"props":1335,"children":1336},{"style":214},[1337],{"type":21,"value":1338}," IProprietarySentence",{"type":15,"tag":201,"props":1340,"children":1341},{"style":220},[1342],{"type":21,"value":1343},">(\n",{"type":15,"tag":201,"props":1345,"children":1346},{"class":203,"line":312},[1347,1352,1356,1360],{"type":15,"tag":201,"props":1348,"children":1349},{"style":226},[1350],{"type":21,"value":1351},"    data",{"type":15,"tag":201,"props":1353,"children":1354},{"style":208},[1355],{"type":21,"value":234},{"type":15,"tag":201,"props":1357,"children":1358},{"style":237},[1359],{"type":21,"value":240},{"type":15,"tag":201,"props":1361,"children":1362},{"style":220},[1363],{"type":21,"value":361},{"type":15,"tag":201,"props":1365,"children":1366},{"class":203,"line":336},[1367,1372,1376,1381],{"type":15,"tag":201,"props":1368,"children":1369},{"style":220},[1370],{"type":21,"value":1371},"  )",{"type":15,"tag":201,"props":1373,"children":1374},{"style":208},[1375],{"type":21,"value":234},{"type":15,"tag":201,"props":1377,"children":1378},{"style":214},[1379],{"type":21,"value":1380}," T",{"type":15,"tag":201,"props":1382,"children":1383},{"style":220},[1384],{"type":21,"value":862},{"type":15,"tag":201,"props":1386,"children":1387},{"class":203,"line":364},[1388,1393,1398,1402,1406,1411,1415,1419,1424,1429,1433,1438,1443,1447,1452],{"type":15,"tag":201,"props":1389,"children":1390},{"style":208},[1391],{"type":21,"value":1392},"    const",{"type":15,"tag":201,"props":1394,"children":1395},{"style":237},[1396],{"type":21,"value":1397}," manufacturerId",{"type":15,"tag":201,"props":1399,"children":1400},{"style":208},[1401],{"type":21,"value":516},{"type":15,"tag":201,"props":1403,"children":1404},{"style":220},[1405],{"type":21,"value":450},{"type":15,"tag":201,"props":1407,"children":1408},{"style":214},[1409],{"type":21,"value":1410},"substr",{"type":15,"tag":201,"props":1412,"children":1413},{"style":220},[1414],{"type":21,"value":223},{"type":15,"tag":201,"props":1416,"children":1417},{"style":237},[1418],{"type":21,"value":604},{"type":15,"tag":201,"props":1420,"children":1421},{"style":220},[1422],{"type":21,"value":1423},", data.",{"type":15,"tag":201,"props":1425,"children":1426},{"style":214},[1427],{"type":21,"value":1428},"indexOf",{"type":15,"tag":201,"props":1430,"children":1431},{"style":220},[1432],{"type":21,"value":223},{"type":15,"tag":201,"props":1434,"children":1435},{"style":301},[1436],{"type":21,"value":1437},"\",\"",{"type":15,"tag":201,"props":1439,"children":1440},{"style":220},[1441],{"type":21,"value":1442},") ",{"type":15,"tag":201,"props":1444,"children":1445},{"style":208},[1446],{"type":21,"value":599},{"type":15,"tag":201,"props":1448,"children":1449},{"style":237},[1450],{"type":21,"value":1451}," 2",{"type":15,"tag":201,"props":1453,"children":1454},{"style":220},[1455],{"type":21,"value":309},{"type":15,"tag":201,"props":1457,"children":1458},{"class":203,"line":373},[1459,1463,1467,1472,1477,1482],{"type":15,"tag":201,"props":1460,"children":1461},{"style":208},[1462],{"type":21,"value":921},{"type":15,"tag":201,"props":1464,"children":1465},{"style":220},[1466],{"type":21,"value":283},{"type":15,"tag":201,"props":1468,"children":1469},{"style":208},[1470],{"type":21,"value":1471},"!",{"type":15,"tag":201,"props":1473,"children":1474},{"style":220},[1475],{"type":21,"value":1476},"Decoder.ProprietaryCodecs.",{"type":15,"tag":201,"props":1478,"children":1479},{"style":214},[1480],{"type":21,"value":1481},"has",{"type":15,"tag":201,"props":1483,"children":1484},{"style":220},[1485],{"type":21,"value":1486},"(manufacturerId))\n",{"type":15,"tag":201,"props":1488,"children":1489},{"class":203,"line":383},[1490,1494,1498,1502],{"type":15,"tag":201,"props":1491,"children":1492},{"style":208},[1493],{"type":21,"value":953},{"type":15,"tag":201,"props":1495,"children":1496},{"style":208},[1497],{"type":21,"value":323},{"type":15,"tag":201,"props":1499,"children":1500},{"style":214},[1501],{"type":21,"value":962},{"type":15,"tag":201,"props":1503,"children":1504},{"style":220},[1505],{"type":21,"value":333},{"type":15,"tag":201,"props":1507,"children":1508},{"class":203,"line":407},[1509,1514,1519,1524],{"type":15,"tag":201,"props":1510,"children":1511},{"style":301},[1512],{"type":21,"value":1513},"        `Unable to decode sentence: unknown manufacturer id for proprietary sentence: ${",{"type":15,"tag":201,"props":1515,"children":1516},{"style":220},[1517],{"type":21,"value":1518},"manufacturerId",{"type":15,"tag":201,"props":1520,"children":1521},{"style":301},[1522],{"type":21,"value":1523},"}`",{"type":15,"tag":201,"props":1525,"children":1526},{"style":220},[1527],{"type":21,"value":361},{"type":15,"tag":201,"props":1529,"children":1530},{"class":203,"line":492},[1531],{"type":15,"tag":201,"props":1532,"children":1533},{"style":220},[1534],{"type":21,"value":999},{"type":15,"tag":201,"props":1536,"children":1537},{"class":203,"line":500},[1538],{"type":15,"tag":201,"props":1539,"children":1540},{"emptyLinePlaceholder":377},[1541],{"type":21,"value":380},{"type":15,"tag":201,"props":1543,"children":1544},{"class":203,"line":542},[1545,1549,1554,1558,1563,1568],{"type":15,"tag":201,"props":1546,"children":1547},{"style":208},[1548],{"type":21,"value":1392},{"type":15,"tag":201,"props":1550,"children":1551},{"style":237},[1552],{"type":21,"value":1553}," sentenceConstructor",{"type":15,"tag":201,"props":1555,"children":1556},{"style":208},[1557],{"type":21,"value":516},{"type":15,"tag":201,"props":1559,"children":1560},{"style":220},[1561],{"type":21,"value":1562}," Decoder.ProprietaryCodecs.",{"type":15,"tag":201,"props":1564,"children":1565},{"style":214},[1566],{"type":21,"value":1567},"get",{"type":15,"tag":201,"props":1569,"children":1570},{"style":220},[1571],{"type":21,"value":1572},"(manufacturerId)\n",{"type":15,"tag":201,"props":1574,"children":1575},{"class":203,"line":550},[1576,1580,1584,1588,1593,1598],{"type":15,"tag":201,"props":1577,"children":1578},{"style":208},[1579],{"type":21,"value":1221},{"type":15,"tag":201,"props":1581,"children":1582},{"style":208},[1583],{"type":21,"value":323},{"type":15,"tag":201,"props":1585,"children":1586},{"style":214},[1587],{"type":21,"value":1553},{"type":15,"tag":201,"props":1589,"children":1590},{"style":220},[1591],{"type":21,"value":1592},"(data, manufacturerId) ",{"type":15,"tag":201,"props":1594,"children":1595},{"style":208},[1596],{"type":21,"value":1597},"as",{"type":15,"tag":201,"props":1599,"children":1600},{"style":214},[1601],{"type":21,"value":1602}," T\n",{"type":15,"tag":201,"props":1604,"children":1605},{"class":203,"line":560},[1606],{"type":15,"tag":201,"props":1607,"children":1608},{"style":220},[1609],{"type":21,"value":1247},{"type":15,"tag":201,"props":1611,"children":1612},{"class":203,"line":622},[1613],{"type":15,"tag":201,"props":1614,"children":1615},{"style":220},[1616],{"type":21,"value":628},{"type":15,"tag":23,"props":1618,"children":1619},{},[1620,1622,1627],{"type":21,"value":1621},"The ",{"type":15,"tag":36,"props":1623,"children":1625},{"className":1624},[],[1626],{"type":21,"value":1234},{"type":21,"value":1628}," method uses the provided data to determine the talker ID and sentence ID. It then checks if the\ntalker ID and sentence ID are registered in the decoder. If they are, it instantiates the corresponding constructor\nand returns it. Here too, the user can pass a generic parameter to the method to get full type safety:",{"type":15,"tag":132,"props":1630,"children":1632},{"code":1631,"language":194,"meta":7,"className":195,"style":7},"class Decoder {\n  public static decodeTalker\u003CT extends ITalkerSentence>(data: string): T {\n    if (data.length \u003C 6)\n      throw new Error(`Unable to decode sentence: invalid format. Expected at least 6 characters, got: ${data} (${data.length} characters)`);\n\n    const talkerIdLength = 2;\n    const sentenceId = data.substr(talkerIdLength + 1, data.indexOf(',') - talkerIdLength - 1);\n    if (!Decoder.TalkerCodecs.has(sentenceId))\n      throw new Error(`Unable to decode sentence: unknown sentence id: ${sentenceId}`);\n\n    const sentenceConstructor = Decoder.TalkerCodecs.get(sentenceId);\n    return new sentenceConstructor(data, talkerIdLength) as T;\n  }\n}\n",[1633],{"type":15,"tag":36,"props":1634,"children":1635},{"__ignoreMap":7},[1636,1651,1717,1746,1801,1808,1833,1913,1942,1979,1986,2015,2047,2054],{"type":15,"tag":201,"props":1637,"children":1638},{"class":203,"line":204},[1639,1643,1647],{"type":15,"tag":201,"props":1640,"children":1641},{"style":208},[1642],{"type":21,"value":852},{"type":15,"tag":201,"props":1644,"children":1645},{"style":214},[1646],{"type":21,"value":857},{"type":15,"tag":201,"props":1648,"children":1649},{"style":220},[1650],{"type":21,"value":862},{"type":15,"tag":201,"props":1652,"children":1653},{"class":203,"line":272},[1654,1658,1662,1667,1671,1675,1679,1684,1689,1693,1697,1701,1705,1709,1713],{"type":15,"tag":201,"props":1655,"children":1656},{"style":208},[1657],{"type":21,"value":870},{"type":15,"tag":201,"props":1659,"children":1660},{"style":208},[1661],{"type":21,"value":875},{"type":15,"tag":201,"props":1663,"children":1664},{"style":214},[1665],{"type":21,"value":1666}," decodeTalker",{"type":15,"tag":201,"props":1668,"children":1669},{"style":220},[1670],{"type":21,"value":259},{"type":15,"tag":201,"props":1672,"children":1673},{"style":214},[1674],{"type":21,"value":1328},{"type":15,"tag":201,"props":1676,"children":1677},{"style":208},[1678],{"type":21,"value":1333},{"type":15,"tag":201,"props":1680,"children":1681},{"style":214},[1682],{"type":21,"value":1683}," ITalkerSentence",{"type":15,"tag":201,"props":1685,"children":1686},{"style":220},[1687],{"type":21,"value":1688},">(",{"type":15,"tag":201,"props":1690,"children":1691},{"style":226},[1692],{"type":21,"value":229},{"type":15,"tag":201,"props":1694,"children":1695},{"style":208},[1696],{"type":21,"value":234},{"type":15,"tag":201,"props":1698,"children":1699},{"style":237},[1700],{"type":21,"value":240},{"type":15,"tag":201,"props":1702,"children":1703},{"style":220},[1704],{"type":21,"value":245},{"type":15,"tag":201,"props":1706,"children":1707},{"style":208},[1708],{"type":21,"value":234},{"type":15,"tag":201,"props":1710,"children":1711},{"style":214},[1712],{"type":21,"value":1380},{"type":15,"tag":201,"props":1714,"children":1715},{"style":220},[1716],{"type":21,"value":862},{"type":15,"tag":201,"props":1718,"children":1719},{"class":203,"line":312},[1720,1724,1728,1732,1737,1742],{"type":15,"tag":201,"props":1721,"children":1722},{"style":208},[1723],{"type":21,"value":921},{"type":15,"tag":201,"props":1725,"children":1726},{"style":220},[1727],{"type":21,"value":1026},{"type":15,"tag":201,"props":1729,"children":1730},{"style":237},[1731],{"type":21,"value":455},{"type":15,"tag":201,"props":1733,"children":1734},{"style":208},[1735],{"type":21,"value":1736}," \u003C",{"type":15,"tag":201,"props":1738,"children":1739},{"style":237},[1740],{"type":21,"value":1741}," 6",{"type":15,"tag":201,"props":1743,"children":1744},{"style":220},[1745],{"type":21,"value":309},{"type":15,"tag":201,"props":1747,"children":1748},{"class":203,"line":336},[1749,1753,1757,1761,1765,1770,1774,1779,1783,1787,1791,1796],{"type":15,"tag":201,"props":1750,"children":1751},{"style":208},[1752],{"type":21,"value":953},{"type":15,"tag":201,"props":1754,"children":1755},{"style":208},[1756],{"type":21,"value":323},{"type":15,"tag":201,"props":1758,"children":1759},{"style":214},[1760],{"type":21,"value":962},{"type":15,"tag":201,"props":1762,"children":1763},{"style":220},[1764],{"type":21,"value":223},{"type":15,"tag":201,"props":1766,"children":1767},{"style":301},[1768],{"type":21,"value":1769},"`Unable to decode sentence: invalid format. Expected at least 6 characters, got: ${",{"type":15,"tag":201,"props":1771,"children":1772},{"style":220},[1773],{"type":21,"value":229},{"type":15,"tag":201,"props":1775,"children":1776},{"style":301},[1777],{"type":21,"value":1778},"} (${",{"type":15,"tag":201,"props":1780,"children":1781},{"style":220},[1782],{"type":21,"value":229},{"type":15,"tag":201,"props":1784,"children":1785},{"style":301},[1786],{"type":21,"value":1093},{"type":15,"tag":201,"props":1788,"children":1789},{"style":237},[1790],{"type":21,"value":455},{"type":15,"tag":201,"props":1792,"children":1793},{"style":301},[1794],{"type":21,"value":1795},"} characters)`",{"type":15,"tag":201,"props":1797,"children":1798},{"style":220},[1799],{"type":21,"value":1800},");\n",{"type":15,"tag":201,"props":1802,"children":1803},{"class":203,"line":364},[1804],{"type":15,"tag":201,"props":1805,"children":1806},{"emptyLinePlaceholder":377},[1807],{"type":21,"value":380},{"type":15,"tag":201,"props":1809,"children":1810},{"class":203,"line":373},[1811,1815,1820,1824,1828],{"type":15,"tag":201,"props":1812,"children":1813},{"style":208},[1814],{"type":21,"value":1392},{"type":15,"tag":201,"props":1816,"children":1817},{"style":237},[1818],{"type":21,"value":1819}," talkerIdLength",{"type":15,"tag":201,"props":1821,"children":1822},{"style":208},[1823],{"type":21,"value":516},{"type":15,"tag":201,"props":1825,"children":1826},{"style":237},[1827],{"type":21,"value":1451},{"type":15,"tag":201,"props":1829,"children":1830},{"style":220},[1831],{"type":21,"value":1832},";\n",{"type":15,"tag":201,"props":1834,"children":1835},{"class":203,"line":383},[1836,1840,1845,1849,1853,1857,1862,1867,1871,1875,1879,1883,1888,1892,1896,1901,1905,1909],{"type":15,"tag":201,"props":1837,"children":1838},{"style":208},[1839],{"type":21,"value":1392},{"type":15,"tag":201,"props":1841,"children":1842},{"style":237},[1843],{"type":21,"value":1844}," sentenceId",{"type":15,"tag":201,"props":1846,"children":1847},{"style":208},[1848],{"type":21,"value":516},{"type":15,"tag":201,"props":1850,"children":1851},{"style":220},[1852],{"type":21,"value":450},{"type":15,"tag":201,"props":1854,"children":1855},{"style":214},[1856],{"type":21,"value":1410},{"type":15,"tag":201,"props":1858,"children":1859},{"style":220},[1860],{"type":21,"value":1861},"(talkerIdLength ",{"type":15,"tag":201,"props":1863,"children":1864},{"style":208},[1865],{"type":21,"value":1866},"+",{"type":15,"tag":201,"props":1868,"children":1869},{"style":237},[1870],{"type":21,"value":1040},{"type":15,"tag":201,"props":1872,"children":1873},{"style":220},[1874],{"type":21,"value":1423},{"type":15,"tag":201,"props":1876,"children":1877},{"style":214},[1878],{"type":21,"value":1428},{"type":15,"tag":201,"props":1880,"children":1881},{"style":220},[1882],{"type":21,"value":223},{"type":15,"tag":201,"props":1884,"children":1885},{"style":301},[1886],{"type":21,"value":1887},"','",{"type":15,"tag":201,"props":1889,"children":1890},{"style":220},[1891],{"type":21,"value":1442},{"type":15,"tag":201,"props":1893,"children":1894},{"style":208},[1895],{"type":21,"value":599},{"type":15,"tag":201,"props":1897,"children":1898},{"style":220},[1899],{"type":21,"value":1900}," talkerIdLength ",{"type":15,"tag":201,"props":1902,"children":1903},{"style":208},[1904],{"type":21,"value":599},{"type":15,"tag":201,"props":1906,"children":1907},{"style":237},[1908],{"type":21,"value":1040},{"type":15,"tag":201,"props":1910,"children":1911},{"style":220},[1912],{"type":21,"value":1800},{"type":15,"tag":201,"props":1914,"children":1915},{"class":203,"line":407},[1916,1920,1924,1928,1933,1937],{"type":15,"tag":201,"props":1917,"children":1918},{"style":208},[1919],{"type":21,"value":921},{"type":15,"tag":201,"props":1921,"children":1922},{"style":220},[1923],{"type":21,"value":283},{"type":15,"tag":201,"props":1925,"children":1926},{"style":208},[1927],{"type":21,"value":1471},{"type":15,"tag":201,"props":1929,"children":1930},{"style":220},[1931],{"type":21,"value":1932},"Decoder.TalkerCodecs.",{"type":15,"tag":201,"props":1934,"children":1935},{"style":214},[1936],{"type":21,"value":1481},{"type":15,"tag":201,"props":1938,"children":1939},{"style":220},[1940],{"type":21,"value":1941},"(sentenceId))\n",{"type":15,"tag":201,"props":1943,"children":1944},{"class":203,"line":492},[1945,1949,1953,1957,1961,1966,1971,1975],{"type":15,"tag":201,"props":1946,"children":1947},{"style":208},[1948],{"type":21,"value":953},{"type":15,"tag":201,"props":1950,"children":1951},{"style":208},[1952],{"type":21,"value":323},{"type":15,"tag":201,"props":1954,"children":1955},{"style":214},[1956],{"type":21,"value":962},{"type":15,"tag":201,"props":1958,"children":1959},{"style":220},[1960],{"type":21,"value":223},{"type":15,"tag":201,"props":1962,"children":1963},{"style":301},[1964],{"type":21,"value":1965},"`Unable to decode sentence: unknown sentence id: ${",{"type":15,"tag":201,"props":1967,"children":1968},{"style":220},[1969],{"type":21,"value":1970},"sentenceId",{"type":15,"tag":201,"props":1972,"children":1973},{"style":301},[1974],{"type":21,"value":1523},{"type":15,"tag":201,"props":1976,"children":1977},{"style":220},[1978],{"type":21,"value":1800},{"type":15,"tag":201,"props":1980,"children":1981},{"class":203,"line":500},[1982],{"type":15,"tag":201,"props":1983,"children":1984},{"emptyLinePlaceholder":377},[1985],{"type":21,"value":380},{"type":15,"tag":201,"props":1987,"children":1988},{"class":203,"line":542},[1989,1993,1997,2001,2006,2010],{"type":15,"tag":201,"props":1990,"children":1991},{"style":208},[1992],{"type":21,"value":1392},{"type":15,"tag":201,"props":1994,"children":1995},{"style":237},[1996],{"type":21,"value":1553},{"type":15,"tag":201,"props":1998,"children":1999},{"style":208},[2000],{"type":21,"value":516},{"type":15,"tag":201,"props":2002,"children":2003},{"style":220},[2004],{"type":21,"value":2005}," Decoder.TalkerCodecs.",{"type":15,"tag":201,"props":2007,"children":2008},{"style":214},[2009],{"type":21,"value":1567},{"type":15,"tag":201,"props":2011,"children":2012},{"style":220},[2013],{"type":21,"value":2014},"(sentenceId);\n",{"type":15,"tag":201,"props":2016,"children":2017},{"class":203,"line":550},[2018,2022,2026,2030,2035,2039,2043],{"type":15,"tag":201,"props":2019,"children":2020},{"style":208},[2021],{"type":21,"value":1221},{"type":15,"tag":201,"props":2023,"children":2024},{"style":208},[2025],{"type":21,"value":323},{"type":15,"tag":201,"props":2027,"children":2028},{"style":214},[2029],{"type":21,"value":1553},{"type":15,"tag":201,"props":2031,"children":2032},{"style":220},[2033],{"type":21,"value":2034},"(data, talkerIdLength) ",{"type":15,"tag":201,"props":2036,"children":2037},{"style":208},[2038],{"type":21,"value":1597},{"type":15,"tag":201,"props":2040,"children":2041},{"style":214},[2042],{"type":21,"value":1380},{"type":15,"tag":201,"props":2044,"children":2045},{"style":220},[2046],{"type":21,"value":1832},{"type":15,"tag":201,"props":2048,"children":2049},{"class":203,"line":560},[2050],{"type":15,"tag":201,"props":2051,"children":2052},{"style":220},[2053],{"type":21,"value":1247},{"type":15,"tag":201,"props":2055,"children":2056},{"class":203,"line":622},[2057],{"type":15,"tag":201,"props":2058,"children":2059},{"style":220},[2060],{"type":21,"value":628},{"type":15,"tag":16,"props":2062,"children":2064},{"id":2063},"tests",[2065],{"type":21,"value":2066},"Tests",{"type":15,"tag":23,"props":2068,"children":2069},{},[2070,2072,2079,2081,2088,2090,2095],{"type":21,"value":2071},"For unit testing, I decided to use ",{"type":15,"tag":29,"props":2073,"children":2076},{"href":2074,"rel":2075},"https://mochajs.org/",[33],[2077],{"type":21,"value":2078},"mocha",{"type":21,"value":2080}," and ",{"type":15,"tag":29,"props":2082,"children":2085},{"href":2083,"rel":2084},"https://www.chaijs.com/",[33],[2086],{"type":21,"value":2087},"chai",{"type":21,"value":2089}," as I like their API. I won't go into the details of how to\nwrite tests, but I will show you how to write a test for the ",{"type":15,"tag":36,"props":2091,"children":2093},{"className":2092},[],[2094],{"type":21,"value":808},{"type":21,"value":2096}," class:",{"type":15,"tag":132,"props":2098,"children":2100},{"code":2099,"language":194,"meta":7,"className":195,"style":7},"describe('Decoder', function () {\n    it('decodes talker sentences', function() {\n        const decoded = Decoder.decodeTalker(\"$--ROT,-0.5,A*0E\\r\\n\");\n\n        expect(decoded.valid).to.equal(true);\n        expect(decoded.talkerId).to.equal(\"--\");\n        expect(decoded.sentenceId).to.equal(\"ROT\");\n    });\n});\n",[2101],{"type":15,"tag":36,"props":2102,"children":2103},{"__ignoreMap":7},[2104,2135,2165,2214,2221,2252,2281,2310,2318],{"type":15,"tag":201,"props":2105,"children":2106},{"class":203,"line":204},[2107,2112,2116,2121,2126,2130],{"type":15,"tag":201,"props":2108,"children":2109},{"style":214},[2110],{"type":21,"value":2111},"describe",{"type":15,"tag":201,"props":2113,"children":2114},{"style":220},[2115],{"type":21,"value":223},{"type":15,"tag":201,"props":2117,"children":2118},{"style":301},[2119],{"type":21,"value":2120},"'Decoder'",{"type":15,"tag":201,"props":2122,"children":2123},{"style":220},[2124],{"type":21,"value":2125},", ",{"type":15,"tag":201,"props":2127,"children":2128},{"style":208},[2129],{"type":21,"value":211},{"type":15,"tag":201,"props":2131,"children":2132},{"style":220},[2133],{"type":21,"value":2134}," () {\n",{"type":15,"tag":201,"props":2136,"children":2137},{"class":203,"line":272},[2138,2143,2147,2152,2156,2160],{"type":15,"tag":201,"props":2139,"children":2140},{"style":214},[2141],{"type":21,"value":2142},"    it",{"type":15,"tag":201,"props":2144,"children":2145},{"style":220},[2146],{"type":21,"value":223},{"type":15,"tag":201,"props":2148,"children":2149},{"style":301},[2150],{"type":21,"value":2151},"'decodes talker sentences'",{"type":15,"tag":201,"props":2153,"children":2154},{"style":220},[2155],{"type":21,"value":2125},{"type":15,"tag":201,"props":2157,"children":2158},{"style":208},[2159],{"type":21,"value":211},{"type":15,"tag":201,"props":2161,"children":2162},{"style":220},[2163],{"type":21,"value":2164},"() {\n",{"type":15,"tag":201,"props":2166,"children":2167},{"class":203,"line":312},[2168,2173,2178,2182,2187,2191,2195,2200,2205,2210],{"type":15,"tag":201,"props":2169,"children":2170},{"style":208},[2171],{"type":21,"value":2172},"        const",{"type":15,"tag":201,"props":2174,"children":2175},{"style":237},[2176],{"type":21,"value":2177}," decoded",{"type":15,"tag":201,"props":2179,"children":2180},{"style":208},[2181],{"type":21,"value":516},{"type":15,"tag":201,"props":2183,"children":2184},{"style":220},[2185],{"type":21,"value":2186}," Decoder.",{"type":15,"tag":201,"props":2188,"children":2189},{"style":214},[2190],{"type":21,"value":1234},{"type":15,"tag":201,"props":2192,"children":2193},{"style":220},[2194],{"type":21,"value":223},{"type":15,"tag":201,"props":2196,"children":2197},{"style":301},[2198],{"type":21,"value":2199},"\"$--ROT,-0.5,A*0E",{"type":15,"tag":201,"props":2201,"children":2202},{"style":237},[2203],{"type":21,"value":2204},"\\r\\n",{"type":15,"tag":201,"props":2206,"children":2207},{"style":301},[2208],{"type":21,"value":2209},"\"",{"type":15,"tag":201,"props":2211,"children":2212},{"style":220},[2213],{"type":21,"value":1800},{"type":15,"tag":201,"props":2215,"children":2216},{"class":203,"line":336},[2217],{"type":15,"tag":201,"props":2218,"children":2219},{"emptyLinePlaceholder":377},[2220],{"type":21,"value":380},{"type":15,"tag":201,"props":2222,"children":2223},{"class":203,"line":364},[2224,2229,2234,2239,2243,2248],{"type":15,"tag":201,"props":2225,"children":2226},{"style":214},[2227],{"type":21,"value":2228},"        expect",{"type":15,"tag":201,"props":2230,"children":2231},{"style":220},[2232],{"type":21,"value":2233},"(decoded.valid).to.",{"type":15,"tag":201,"props":2235,"children":2236},{"style":214},[2237],{"type":21,"value":2238},"equal",{"type":15,"tag":201,"props":2240,"children":2241},{"style":220},[2242],{"type":21,"value":223},{"type":15,"tag":201,"props":2244,"children":2245},{"style":237},[2246],{"type":21,"value":2247},"true",{"type":15,"tag":201,"props":2249,"children":2250},{"style":220},[2251],{"type":21,"value":1800},{"type":15,"tag":201,"props":2253,"children":2254},{"class":203,"line":373},[2255,2259,2264,2268,2272,2277],{"type":15,"tag":201,"props":2256,"children":2257},{"style":214},[2258],{"type":21,"value":2228},{"type":15,"tag":201,"props":2260,"children":2261},{"style":220},[2262],{"type":21,"value":2263},"(decoded.talkerId).to.",{"type":15,"tag":201,"props":2265,"children":2266},{"style":214},[2267],{"type":21,"value":2238},{"type":15,"tag":201,"props":2269,"children":2270},{"style":220},[2271],{"type":21,"value":223},{"type":15,"tag":201,"props":2273,"children":2274},{"style":301},[2275],{"type":21,"value":2276},"\"--\"",{"type":15,"tag":201,"props":2278,"children":2279},{"style":220},[2280],{"type":21,"value":1800},{"type":15,"tag":201,"props":2282,"children":2283},{"class":203,"line":383},[2284,2288,2293,2297,2301,2306],{"type":15,"tag":201,"props":2285,"children":2286},{"style":214},[2287],{"type":21,"value":2228},{"type":15,"tag":201,"props":2289,"children":2290},{"style":220},[2291],{"type":21,"value":2292},"(decoded.sentenceId).to.",{"type":15,"tag":201,"props":2294,"children":2295},{"style":214},[2296],{"type":21,"value":2238},{"type":15,"tag":201,"props":2298,"children":2299},{"style":220},[2300],{"type":21,"value":223},{"type":15,"tag":201,"props":2302,"children":2303},{"style":301},[2304],{"type":21,"value":2305},"\"ROT\"",{"type":15,"tag":201,"props":2307,"children":2308},{"style":220},[2309],{"type":21,"value":1800},{"type":15,"tag":201,"props":2311,"children":2312},{"class":203,"line":407},[2313],{"type":15,"tag":201,"props":2314,"children":2315},{"style":220},[2316],{"type":21,"value":2317},"    });\n",{"type":15,"tag":201,"props":2319,"children":2320},{"class":203,"line":492},[2321],{"type":15,"tag":201,"props":2322,"children":2323},{"style":220},[2324],{"type":21,"value":2325},"});\n",{"type":15,"tag":23,"props":2327,"children":2328},{},[2329],{"type":21,"value":2330},"This just checks that the decoder can correctly parse a talker sentence and that the returned object has the correct\nproperties.",{"type":15,"tag":23,"props":2332,"children":2333},{},[2334,2336,2347],{"type":21,"value":2335},"If you want to see more tests or tests for specific sentences, you can check out the ",{"type":15,"tag":29,"props":2337,"children":2340},{"href":2338,"rel":2339},"https://github.com/ricardoboss/extended-nmea/tree/70915a762d1b71678c272a73027480712f33fda0/test",[33],[2341],{"type":15,"tag":36,"props":2342,"children":2344},{"className":2343},[],[2345],{"type":21,"value":2346},"test",{"type":21,"value":2348}," in the repository.",{"type":15,"tag":16,"props":2350,"children":2352},{"id":2351},"conclusion",[2353],{"type":21,"value":2354},"Conclusion",{"type":15,"tag":23,"props":2356,"children":2357},{},[2358,2360,2367],{"type":21,"value":2359},"I hope this post has given you a better understanding of how the NMEA0183 protocol works and how to implement it in\nTypeScript. I hope you find this library useful and that it helps you in your own projects. If you have any questions,\nfeel free to ",{"type":15,"tag":29,"props":2361,"children":2364},{"href":2362,"rel":2363},"https://ricardoboss.de/contact",[33],[2365],{"type":21,"value":2366},"reach out to me",{"type":21,"value":1093},{"type":15,"tag":2369,"props":2370,"children":2371},"style",{},[2372],{"type":21,"value":2373},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"title":7,"searchDepth":272,"depth":272,"links":2375},[2376,2377,2380,2381,2382,2383],{"id":18,"depth":272,"text":18},{"id":45,"depth":272,"text":48,"children":2378},[2379],{"id":64,"depth":312,"text":67},{"id":733,"depth":272,"text":736},{"id":794,"depth":272,"text":797},{"id":2063,"depth":272,"text":2066},{"id":2351,"depth":272,"text":2354},"markdown","content:blog:2021-05-19-developing-extended-nmea.md","content","blog/2021-05-19-developing-extended-nmea.md","md",1733192181309]